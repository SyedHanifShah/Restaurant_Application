// Generated by Dagger (https://dagger.dev).
package com.corn.cornpos.di;

import com.corn.cornpos.data.database.CornPosDataBase;
import com.corn.cornpos.repository.CornDataBaseRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideDataBaseRepositoryFactory implements Factory<CornDataBaseRepository> {
  private final Provider<CornPosDataBase> dbProvider;

  public AppModule_ProvideDataBaseRepositoryFactory(Provider<CornPosDataBase> dbProvider) {
    this.dbProvider = dbProvider;
  }

  @Override
  public CornDataBaseRepository get() {
    return ProvideDataBaseRepository(dbProvider.get());
  }

  public static AppModule_ProvideDataBaseRepositoryFactory create(
      Provider<CornPosDataBase> dbProvider) {
    return new AppModule_ProvideDataBaseRepositoryFactory(dbProvider);
  }

  public static CornDataBaseRepository ProvideDataBaseRepository(CornPosDataBase db) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.ProvideDataBaseRepository(db));
  }
}
